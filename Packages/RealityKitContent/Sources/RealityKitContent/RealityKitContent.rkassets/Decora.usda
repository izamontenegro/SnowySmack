#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Dancing_Penguin"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["pinguim", "Dancing_Penguin", "Snow_Man", "Christmas_Tree_POLYCRAFT", "ParticleEmitter"]

def "Dancing_Penguin" (
    active = true
    customData = {
        float3 rotationEulerHint = (0, 0.6044865, 0)
    }
    references = @Dancing_Penguin.usdz@
)
{
    reorder nameChildren = ["Materials", "SkinnedMeshes", "RCP_BehaviorsContainer", "OnAddedToScene", "AnimationLibrary", "dancinha"]
    quatf xformOp:orient = (0.95467114, 0, 0.2976625, 0)
    float3 xformOp:scale = (0.0015213494, 0.0015213493, 0.0015213493)
    float3 xformOp:translate = (-1.1752527, 1.7881393e-7, -2.5904403)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def RealityKitComponent "RCP_BehaviorsContainer"
    {
        rel behaviors = </Dancing_Penguin/OnAddedToScene>
        uniform token info:id = "RCP.BehaviorsContainer"
    }

    def Preliminary_Behavior "OnAddedToScene"
    {
        rel actions = </Dancing_Penguin/OnAddedToScene/Action>
        uniform bool exclusive
        rel triggers = </Dancing_Penguin/OnAddedToScene/Trigger>

        def Preliminary_Trigger "Trigger"
        {
            rel affectedObjects = </Dancing_Penguin>
            token info:id = "SceneTransition"
        }

        def Preliminary_Action "Action"
        {
            rel affectedObjects = </Dancing_Penguin>
            rel animationLibraryKey = </Dancing_Penguin/dancinha>
            rel animationLibraryKeyOverrideKey = </Dancing_Penguin/OnAddedToScene/Trigger>
            token info:id = "PlayTimeline"
            int loops = 0
            int performCount = 1
            token type = "serial"
        }
    }

    def RealityKitComponent "AnimationLibrary"
    {
        token info:id = "RealityKit.AnimationLibrary"

        def RealityKitAnimationFile "default_subtree_animation"
        {
            uniform bool looping = 1
            uniform string name = "default subtree animation"
        }
    }

    def RealityKitTimeline "dancinha"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 22.75
                uniform token info:id = "D916D1F7-4F8B-4635-A0F4-E665FA60B952"
                double loopCount = 0
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Dancing_Penguin>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    over "SkinnedMeshes"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.6635538, 0.6635538, 0.6635538)
        float3 xformOp:translate = (-0.00030517575, 0, 0.0001220703)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def "Snow_Man" (
    active = true
    customData = {
        float3 rotationEulerHint = (-0.024289846, -1.95661, 0.020858765)
    }
    references = @Snow_Man.usdz@
)
{
    quatf xformOp:orient = (0.55846304, 0.0018693553, -0.8295164, -0.00425054)
    float3 xformOp:scale = (0.0025224849, 0.0025224849, 0.0025224856)
    float3 xformOp:translate = (-0.34631878, 9.406358e-8, -3.059991)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def "Christmas_Tree_POLYCRAFT" (
    active = true
    customData = {
        float3 rotationEulerHint = (0, -0.56392354, 0)
    }
    references = @Christmas_Tree_POLYCRAFT.usdz@
)
{
    quatf xformOp:orient = (0.96051145, 0, -0.27824047, 0)
    float3 xformOp:scale = (0.003923063, 0.003923063, 0.003923063)
    float3 xformOp:translate = (0.56859064, 0, -2.6041284)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def Xform "ParticleEmitter"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (-0.32301915, 2.103809, -2.6354175)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def RealityKitComponent "VFXEmitter"
    {
        token info:id = "RealityKit.VFXEmitter"

        def RealityKitStruct "currentState"
        {
            token birthDirection = "Constant"
            token birthLocation = "Volume"
            float3 emissionDirection = (0, -1, 0)
            double emissionDuration = 1
            double emissionDurationVariation = 0
            token emitterShape = "Cylinder"
            double idleDuration = 0
            double idleDurationVariation = 0
            bool isLocal = 0
            bool isSpawningEnabled = 0
            bool loops = 1
            float particleSpeed = 0.08
            float particleSpeedVariation = 0.04
            float3 shapeSize = (2, 10, 2)
            bool spawnInheritParentColor = 0
            token spawnOccasion = "OnUpdate"
            float spawnSpreadFactor = 0
            float spawnSpreadFactorVariation = 0
            float spawnVelocityFactor = 1
            double warmupDuration = 0

            def RealityKitStruct "mainEmitter"
            {
                float3 acceleration = (0, 0, 0)
                token billboardMode = "Billboard"
                float birthRate = 1000
                float birthRateVariation = 10
                token blendMode = "Alpha"
                float colorEvolutionPower = 0
                float dampingFactor = 0
                float4 endColorA = (1, 1, 1, 1)
                float4 endColorB = (1, 1, 1, 1)
                bool isLightingEnabled = 0
                float noiseAnimationSpeed = 2
                float noiseScale = 1
                float noiseStrength = 0.03
                token opacityOverLife = "GradualFadeInOut"
                float particleAngle = 3.1415925
                float particleAngleVariation = 3.1415925
                float particleAngularVelocity = 0
                float particleAngularVelocityVariation = 0.5
                asset particleImage = @ParticleEmitterPresetTextures/snow.png@
                double particleLifeSpan = 20
                double particleLifeSpanVariation = 0.2
                float particleMass = 1
                float particleMassVariation = 0
                float particleSize = 0.004
                float particleSizeVariation = 0.002
                float3 radialGravityCenter = (1, 1, 0)
                float radialGravityStrength = 0
                float sizeMultiplierAtEndOfLifespan = 0.8
                float sizeMultiplierAtEndOfLifespanPower = 10
                token sortOrder = "IncreasingDepth"
                float spreadingAngle = 0
                float4 startColorA = (1, 1, 1, 1)
                float4 startColorB = (1, 1, 1, 1)
                float stretchFactor = 0
                bool useEndColor = 1
                bool useEndColorRange = 0
                bool useStartColorRange = 0
                float3 vortexDirection = (0, 1, 0)
                float vortexStrength = 0
            }

            def RealityKitStruct "spawnedEmitter"
            {
            }
        }
    }
}

def "pinguim_1" (
    active = true
    customData = {
        float3 rotationEulerHint = (1.6738422, 0.12530118, -0.016292818)
    }
    references = @Materials/pinguim.usdz@
)
{
    float2 ui:nodegraph:node:pos = (20, 20)
    int ui:nodegraph:node:stackingOrder = 1
    quatf xformOp:orient = (0.6680374, 0.74144465, 0.035894077, -0.051936693)
    float3 xformOp:scale = (0.0012285073, 0.0012285074, 0.0012285074)
    float3 xformOp:translate = (0.4157961, 1.0598314, -3)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def "pinguim_2" (
    active = true
    customData = {
        float3 rotationEulerHint = (1.6738427, 0.12530115, -0.016292816)
    }
    references = @Materials/pinguim.usdz@
)
{
    reorder nameChildren = ["pinguim", "Materials", "Meshes"]
    float2 ui:nodegraph:node:pos = (20, 20)
    int ui:nodegraph:node:stackingOrder = 1
    quatf xformOp:orient = (0.66803724, 0.7414448, 0.03589406, -0.051936697)
    float3 xformOp:scale = (0.0012285077, 0.0012285075, 0.0012285075)
    float3 xformOp:translate = (-1.0150993, 1.0769656, -2.9681902)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def "pinguim_0" (
    active = true
    customData = {
        float3 rotationEulerHint = (1.6738422, 0.12530118, -0.016292818)
    }
    references = @Materials/pinguim.usdz@
)
{
    reorder nameChildren = ["Materials", "Meshes", "pinguim", "pinguim_1", "pinguim_2"]
    quatf xformOp:orient = (0.6680374, 0.74144465, 0.035894077, -0.051936693)
    float3 xformOp:scale = (0.0012285073, 0.0012285074, 0.0012285074)
    float3 xformOp:translate = (-0.30255607, 1.0855777, -2.9999998)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def "pinguim_3" (
    active = true
    customData = {
        float3 rotationEulerHint = (1.6738424, 0.12530114, -0.01629282)
    }
    references = @Materials/pinguim.usdz@
)
{
    reorder nameChildren = ["pinguim", "Materials", "Meshes"]
    float2 ui:nodegraph:node:pos = (20, 20)
    int ui:nodegraph:node:stackingOrder = 1
    quatf xformOp:orient = (0.6680373, 0.74144477, 0.035894055, -0.05193669)
    float3 xformOp:scale = (0.0012285077, 0.0012285075, 0.0012285074)
    float3 xformOp:translate = (-0.2903629, 1.7711, -3)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def "pinguim_4" (
    active = true
    customData = {
        float3 rotationEulerHint = (1.6738424, 0.12530114, -0.01629282)
    }
    references = @Materials/pinguim.usdz@
)
{
    float2 ui:nodegraph:node:pos = (40, 40)
    int ui:nodegraph:node:stackingOrder = 2
    quatf xformOp:orient = (0.6680373, 0.74144477, 0.035894055, -0.05193669)
    float3 xformOp:scale = (0.0012285077, 0.0012285075, 0.0012285074)
    float3 xformOp:translate = (0.36836553, 1.7419113, -3)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def "pinguim_5" (
    active = true
    customData = {
        float3 rotationEulerHint = (1.6738421, 0.12530108, -0.016292855)
    }
    references = @Materials/pinguim.usdz@
)
{
    reorder nameChildren = ["pinguim", "Materials", "Meshes"]
    float2 ui:nodegraph:node:pos = (40, 40)
    int ui:nodegraph:node:stackingOrder = 2
    quatf xformOp:orient = (0.6680375, 0.74144465, 0.035894036, -0.051936675)
    float3 xformOp:scale = (0.0012285074, 0.0012285075, 0.0012285074)
    float3 xformOp:translate = (-1.0656976, 1.771102, -3.0034811)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

